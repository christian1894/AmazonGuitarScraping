vLinkBooks
linksBooks
class(linksBooks)
length(linksBooks)
linksBooks
test = dameLinksPagina(pag[5])
linksBooks<-sapply(pag, dameLinksPagina)
flat = flatten(linksBooks)
#URL LIST AFTER PAGINATION
dameLinksPagina<-function(url){
selector = "li.col-xs-6:nth-child(5) > article:nth-child(1) > h3:nth-child(3) > a:nth-child(1)"
pagina<-read_html(url)
nodo<-html_nodes(pagina, selector)
nodo_text<-html_text(nodo)
nodo_links<-html_attr(nodo, "href")
nodo_links
}
test = dameLinksPagina(pag[5])
linksBooks<-sapply(pag, dameLinksPagina)
flat = flatten(as.vector(linksBooks))
test = dameLinksPagina(pag[5])
linksBooks<-sapply(pag, dameLinksPagina)
vlink<-as.vector(linksBooks)
class(vlink)
vlink
test
linksBooks
length(linksBooks)
source('~/Documents/Data science/AmazonGuitarScraping/amazonGuitarScraping.R', echo=TRUE)
source('~/Documents/Data science/AmazonGuitarScraping/amazonGuitarScraping.R', echo=TRUE)
linksBooks[1]
test
pag
test
selector = "article > h3 > a"
pagina<-read_html(url)
nodo<-html_nodes(pagina, selector)
nodo_text<-html_text(nodo)
nodo_links<-html_attr(nodo, "href")
nodo_links
pag
#URL LIST AFTER PAGINATION
dameLinksPagina<-function(url){
selector = "article > h3 > a"
pagina<-read_html(url)
nodo<-html_nodes(pagina, selector)
nodo_text<-html_text(nodo)
nodo_links<-html_attr(nodo, "href")
nodo_links
}
selector = "article > h3 > a"
pagina<-read_html(url)
nodo<-html_nodes(pagina, selector)
nodo_text<-html_text(nodo)
nodo_links<-html_attr(nodo, "href")
nodo_links
test = dameLinksPagina(pag[5])
test
test = dameLinksPagina(pag[5])
linksBooks<-sapply(pag, dameLinksPagina)
linksBooks
linksBooks[1]
test
test = dameLinksPagina(pag[3])
test
linksBooks
class(linksBooks)
test = dameLinksPagina(pag[3])
linksBooks<-sapply(pag, dameLinksPagina)
vlink<- as.vector(linksBooks)
vlink
test = dameLinksPagina(pag[3])
linksBooks<-sapply(pag, dameLinksPagina)
vlink<- as.vector(linksBooks)
vLinkBooks<-paste0("http://books.toscrape.com/catalogue/", linksBooks)
vLinkBooks
vLinkBooks
class(vLinkBooks)
test = dameLinksPagina(pag[3])
linksBooks<-sapply(pag, dameLinksPagina)
vlink<- as.vector(linksBooks)
vLinkBooks<-paste0("http://books.toscrape.com/catalogue/", vlink)
vLinkBooks
View(linksBooks)
class(vLinkBooks)
vLinksBooks[2]
vLinkBooks[2]
vLinkBooks[200]
#BOOK NAME
url = "http://books.toscrape.com/catalogue/deliciously-ella-every-day-quick-and-easy-recipes-for-gluten-free-snacks-packed-lunches-and-simple-meals_801/index.html"
selector_nombre<-"h1"
pagina_web<-read_html(url)
nombre_nodo<-html_node(pagina_web, selector_nombre)
nombre_texto<-html_text(nombre_nodo)
nombre_texto
#PRODUCT REVIEWS
opiniones<-"p.star-rating:nth-child(4)"
opiniones_nodo<-html_node(pagina_web, opiniones)
opiniones_texto<-html_text(opiniones_nodo)
opiniones_texto
#PRODUCT REVIEWS
opiniones<-"p.star-rating"
opiniones_nodo<-html_node(pagina_web, opiniones)
opiniones_nodo
opiniones_texto
#PRODUCT REVIEWS
opiniones<-"p.star-rating"
opiniones_nodo<-html_node(pagina_web, opiniones)
opiniones_texto<-html_text(opiniones_nodo)
opiniones_texto
#PRODUCT REVIEWS
opiniones<-"p.star-rating"
opiniones_nodo<-html_node(pagina_web, opiniones)
opiniones_texto<-html_attr("class")
opiniones_texto
#PRODUCT REVIEWS
opiniones<-"p.star-rating"
opiniones_nodo<-html_node(pagina_web, opiniones)
opiniones_texto<-html_attr(opiniones_nodo "class")
opiniones_texto
nombre_nodo<-html_node(pagina_web, selector_nombre)
nombre_texto<-html_text(nombre_nodo)
nombre_texto
#PRODUCT REVIEWS
opiniones<-"p.star-rating"
opiniones_nodo<-html_node(pagina_web, opiniones)
opiniones_texto<-html_attr(opiniones_nodo, "class")
opiniones_texto
#PRODUCT PRICE
selector_precio <-"p.price_color:nth-child(2)"
precio_nodo<-html_node(pagina_web, selector_precio)
precio_texto<-html_text(precio_nodo)
precio_texto
#PRODUCT PRICE
selector_precio <-"p.price_color"
precio_nodo<-html_node(pagina_web, selector_precio)
precio_texto<-html_text(precio_nodo)
precio_texto
#PRODUCT DETAIL
selector_details = ".table"
details_nodo<-html_node(pagina_web, selector_details)
tabla_tab<-html_table(details_nodo)
tabla_tab
class(table_tab)
class(tabla_tab)
table_tab
#PRODUCT DETAIL
selector_details = ".table"
details_nodo<-html_node(pagina_web, selector_details)
table_tab<-html_table(details_nodo)
table_tab
table_tab
val<-table_tab$X2
val
val
res_table = data.frame(t(val))
res_table
val
t(val)
res_table
table_names = table_tab$X1
table_names
table_names
colnames(res_table) = table_names
res_table
View(res_table)
colnames(res_table) = table_names
res_table
str(res_tabla)
str(res_table)
book_results = c(nombre_texto, precio_texto, as.character(res_table$Availability))
book_results
source('~/Documents/Data science/AmazonGuitarScraping/amazonGuitarScraping.R', echo=TRUE)
book_results
#PRODUCT REVIEWS
opiniones<-"p.star-rating"
opiniones_nodo<-html_node(pagina_web, opiniones)
opiniones_texto<-html_attr(opiniones_nodo, "class")
opiniones_texto
opiniones_texto
substr(opiniones_texto, 0, 12)
substr(opiniones_texto, 12, -1)
substr(opiniones_texto, 12, 15)
substr(opiniones_texto, 12)
substr(opiniones_texto, 12, 10000)
substr(opiniones_texto, 12, 17)
opiniones_texto
opiniones_texto<-html_attr(opiniones_nodo, "class")
opiniones_texto
opiniones_texto<-html_attr(opiniones_nodo, "class")
opiniones_texto  = "star-rating Two"
opiniones_texto
substr(opiniones_texto, 12, 17)
#PRODUCT REVIEWS
opiniones<-"p.star-rating"
opiniones_nodo<-html_node(pagina_web, opiniones)
opiniones_texto<-html_attr(opiniones_nodo, "class")
#PRODUCT PRICE
selector_precio <-"p.price_color"
substr(opiniones_texto, 12, 17)
substr(opiniones_texto, 13, 17)
switch("shape", "color" = "red", "shape" = "square", "length" = 5)
switch("shape", "color" = "red", "shape" = "square", "length" = 5)
switch("Three", "Three" = 3, "shape" = "square", "length" = 5)
#PRODUCT REVIEWS
opiniones<-"p.star-rating"
opiniones_nodo<-html_node(pagina_web, opiniones)
opiniones_texto<-html_attr(opiniones_nodo, "class")
opiniones_texto = substr(opiniones_texto, 13, 17)
opiniones_texto_number = switch(opiniones_texto, "Zero" = 0,"One" = 1, "Two" = 2, "Three" = 3, "Four" = 4, "Five" = 5,)
#PRODUCT PRICE
selector_precio <-"p.price_color"
opiniones_texto_number
#BOOK NAME
url = "http://books.toscrape.com/catalogue/tipping-the-velvet_999/index.html"
selector_nombre<-"h1"
pagina_web<-read_html(url)
nombre_nodo<-html_node(pagina_web, selector_nombre)
nombre_texto<-html_text(nombre_nodo)
nombre_texto
nombre_texto
#PRODUCT REVIEWS
opiniones<-"p.star-rating"
opiniones_nodo<-html_node(pagina_web, opiniones)
opiniones_texto<-html_attr(opiniones_nodo, "class")
opiniones_texto = substr(opiniones_texto, 13, 17)
opiniones_texto_number = switch(opiniones_texto, "Zero" = 0,"One" = 1, "Two" = 2, "Three" = 3, "Four" = 4, "Five" = 5,)
opiniones_texto_number
#PRODUCT PRICE
selector_precio <-"p.price_color"
precio_nodo<-html_node(pagina_web, selector_precio)
precio_texto<-html_text(precio_nodo)
precio_texto
#PRODUCT DETAIL
selector_details = ".table"
details_nodo<-html_node(pagina_web, selector_details)
table_tab<-html_table(details_nodo)
table_tab
val<-table_tab$X2
val
t(val)
res_table = data.frame(t(val))
res_table
table_names = table_tab$X1
table_names
colnames(res_table) = table_names
res_table
str(res_table)
book_results = c(nombre_texto, precio_texto, as.character(res_table$Availability))
book_results
source('~/Downloads/aspiradoras_7420c7aa-7681-4e6e-a85a-19fc57b48ec8.R', echo=TRUE)
resultado_aspiradoras
book_results
source('~/Documents/Data science/AmazonGuitarScraping/amazonGuitarScraping.R', echo=TRUE)
book_results
source('~/Documents/Data science/AmazonGuitarScraping/amazonGuitarScraping.R', echo=TRUE)
vLinkBooks
test = getArticulo(vLinkBooks[1])
test
test
source('~/Documents/Data science/AmazonGuitarScraping/amazonGuitarScraping.R', echo=TRUE)
test = getArticulo(vLinkBooks[100])
test
getArticulo = function(url){
page = read_html(url)
#BOOK NAME
selector_nombre<-"h1"
nombre_nodo<-html_node(page, selector_nombre)
nombre_texto<-html_text(nombre_nodo)
#PRODUCT REVIEWS
opiniones<-"p.star-rating"
opiniones_nodo<-html_node(page, opiniones)
opiniones_texto<-html_attr(opiniones_nodo, "class")
opiniones_texto = substr(opiniones_texto, 13, 17)
opiniones_number = switch(opiniones_texto, "Zero" = 0,"One" = 1, "Two" = 2, "Three" = 3, "Four" = 4, "Five" = 5,)
#PRODUCT PRICE
selector_precio <-"p.price_color"
precio_nodo<-html_node(page, selector_precio)
precio_texto<-html_text(precio_nodo)
book = c(nombre_texto, opiniones_number, precio_texto)
}
test = getArticulo(vLinkBooks[100])
test
test = getArticulo(vLinkBooks[1])
test
test = getArticulo(vLinkBooks[150])
test
res_table
if(is.na(details_nodo)){
table = data.frame(colnames(colnames))
table = rbind(table, c("-1"))
colnames(table) = colnames
}else{
zero = matrix("-1", nrow= 1, ncol= 4)
data_frame_zero = data.frame(zero)
colnames(data_frame_zero) = colnames
availability = as.character(table$Availability)
if(length(availability) == 0) availability = "-1"
data_frame_zero$Availability = availability
table = data_frame_zero
colnames(table) = colnames
}
source('~/Documents/Data science/AmazonGuitarScraping/amazonGuitarScraping.R', echo=TRUE)
#PRODUCT DETAIL
selector_details = ".table"
details_nodo<-html_node(pagina_web, selector_details)
if(!is.na(details_nodo)){
table_tab<-html_table(details_nodo)
val<-table_tab$X2
res_table = data.frame(t(val))
table_names = table_tab$X1
colnames(res_table) = table_names
}
if(is.na(details_nodo)){
table = data.frame(colnames(colnames))
table = rbind(table, c("-1"))
colnames(table) = colnames
}else{
zero = matrix("-1", nrow= 1, ncol= 4)
data_frame_zero = data.frame(zero)
colnames(data_frame_zero) = colnames
availability = as.character(table$Availability)
if(length(availability) == 0) availability = "-1"
data_frame_zero$Availability = availability
table = data_frame_zero
colnames(table) = colnames
}
if(!is.na(details_nodo)){
table_tab<-html_table(details_nodo)
val<-table_tab$X2
res_table = data.frame(t(val))
table_names = table_tab$X1
colnames(res_table) = table_names
}
res_table
if(is.na(details_nodo)){
table = data.frame(colnames(colnames))
table = rbind(table, c("-1"))
colnames(table) = colnames
}else{
zero = matrix("-1", nrow= 1, ncol= 4)
data_frame_zero = data.frame(zero)
colnames(data_frame_zero) = colnames
availability = as.character(table$Availability)
if(length(availability) == 0) availability = "-1"
data_frame_zero$Availability = availability
table = data_frame_zero
colnames(table) = colnames
}
table = data.frame(colnames(colnames))
table
table = rbind(table, c("-1"))
table
colnames(table) = colnames
ta
colnames = c("Availability")
table = data.frame(colnames(colnames))
table
table = rbind(table, c("-1"))
table
colnames(table) = colnames
table
zero = matrix("-1", nrow= 1, ncol= 4)
zero
data_frame_zero = data.frame(zero)
data_frame_zero
colnames(data_frame_zero) = colnames
data_frame_zero
zero = matrix("-1", nrow= 1, ncol= 1)
data_frame_zero = data.frame(zero)
colnames(data_frame_zero) = colnames
data_frame_zero
availability = as.character(table$Availability)
if(length(availability) == 0) availability = "-1"
data_frame_zero$Availability = availability
data_frame_zero
table = data_frame_zero
table
colnames(table) = colnames
getArticulo = function(url){
page = read_html(url)
#BOOK NAME
selector_nombre<-"h1"
nombre_nodo<-html_node(page, selector_nombre)
nombre_texto<-html_text(nombre_nodo)
#PRODUCT REVIEWS
opiniones<-"p.star-rating"
opiniones_nodo<-html_node(page, opiniones)
opiniones_texto<-html_attr(opiniones_nodo, "class")
opiniones_texto = substr(opiniones_texto, 13, 17)
opiniones_number = switch(opiniones_texto, "Zero" = 0,"One" = 1, "Two" = 2, "Three" = 3, "Four" = 4, "Five" = 5,)
#PRODUCT PRICE
selector_precio <-"p.price_color"
precio_nodo<-html_node(page, selector_precio)
precio_texto<-html_text(precio_nodo)
#PRODUCT DETAIL
selector_details = ".table"
details_nodo<-html_node(pagina_web, selector_details)
if(!is.na(details_nodo)){
table_tab<-html_table(details_nodo)
val<-table_tab$X2
table = data.frame(t(val))
table_names = table_tab$X1
colnames(table) = table_names
}
colnames = c("Availability")
if(is.na(details_nodo)){
table = data.frame(colnames(colnames))
table = rbind(table, c("-1"))
colnames(table) = colnames
}else{
zero = matrix("-1", nrow= 1, ncol= 1)
data_frame_zero = data.frame(zero)
colnames(data_frame_zero) = colnames
availability = as.character(table$Availability)
if(length(availability) == 0) availability = "-1"
data_frame_zero$Availability = availability
table = data_frame_zero
colnames(table) = colnames
}
book = c(nombre_texto, opiniones_number, precio_texto, as.character(table$Availability))
}
test = getArticulo(vLinkBooks[150])
test
test = getArticulo(vLinkBooks[15])
test
test = getArticulo(vLinkBooks[10])
test
test = getArticulo(vLinkBooks[1000])
test
test = getArticulo(vLinkBooks[1])
test
getArticulo = function(url){
page = read_html(url)
#BOOK NAME
selector_nombre<-"h1"
nombre_nodo<-html_node(page, selector_nombre)
nombre_texto<-html_text(nombre_nodo)
#PRODUCT REVIEWS
opiniones<-"p.star-rating"
opiniones_nodo<-html_node(page, opiniones)
opiniones_texto<-html_attr(opiniones_nodo, "class")
opiniones_texto = substr(opiniones_texto, 13, 17)
opiniones_number = switch(opiniones_texto, "Zero" = 0,"One" = 1, "Two" = 2, "Three" = 3, "Four" = 4, "Five" = 5,)
#PRODUCT PRICE
selector_precio <-"p.price_color"
precio_nodo<-html_node(page, selector_precio)
precio_texto<-html_text(precio_nodo)
#PRODUCT DETAIL
selector_details = ".table"
details_nodo<-html_node(page, selector_details)
if(!is.na(details_nodo)){
table_tab<-html_table(details_nodo)
val<-table_tab$X2
table = data.frame(t(val))
table_names = table_tab$X1
colnames(table) = table_names
}
colnames = c("Availability")
if(is.na(details_nodo)){
table = data.frame(colnames(colnames))
table = rbind(table, c("-1"))
colnames(table) = colnames
}else{
zero = matrix("-1", nrow= 1, ncol= 1)
data_frame_zero = data.frame(zero)
colnames(data_frame_zero) = colnames
availability = as.character(table$Availability)
if(length(availability) == 0) availability = "-1"
data_frame_zero$Availability = availability
table = data_frame_zero
colnames(table) = colnames
}
book = c(nombre_texto, opiniones_number, precio_texto, as.character(table$Availability))
}
test = getArticulo(vLinkBooks[1])
test
test = getArticulo(vLinkBooks[20])
test
vLinksBook
vLinkBooks
results = sapply(vLinkBooks, getArticulo)
View(results)
class(results)
t(results)
results = t(results)
View(results)
results = t(results)
colnames(results) = c("Book Name", "Rating", "Price", "Availability")
rownames(results) = c(1:1000)
results = t(results)
colnames(results) = c("Book Name", "Rating", "Price", "Availability")
View(results)
rownames(results) = c(1:1000)
View(results)
write.csv(results, file="bookScraping")
source('~/Documents/Data science/AmazonGuitarScraping/amazonGuitarScraping.R', echo=TRUE)
class(results)
books = as.dataframe(results)
books = as.data.frame(results)
View(books)
file = read.csv("file(2).csv")
source('~/.active-rstudio-document', echo=TRUE)
file
file = read.csv("file(2).csv", header = FALSE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
file
setwd("/home/christian/Documents/Data science/AmazonGuitarScraping")
setwd("/home/christian/Documents/Data science/AmazonGuitarScraping")
file = read.csv("file(2).csv", header = FALSE)
file
